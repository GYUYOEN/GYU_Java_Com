SELECT * FROM EMPLOYEES;

SELECT * FROM DEPARTMENTS;

SELECT * FROM JOBS;

SELECT * FROM LOCATIONS;

SELECT * FROM  COUNTRIES;

SELECT * FROM REGIONS;


/*
 * 1. EMPLOYEES 테이블을 조회할 때 JOB_ID, DEPARTMENT_ID 컬럼의 ID가 아닌
 *    식별 가능한 이름으로 조회될 수 있도록 DEPARTMENTS, JOBS 테이블을 조인
 *    (서브쿼리도 사용 가능하기 때문에 서브쿼리도 만들어 본다.)
 */
SELECT E.EMPLOYEE_ID
	 , E.FIRST_NAME
	 , E.LAST_NAME
	 , E.EMAIL
	 , E.PHONE_NUMBER
	 , E.HIRE_DATE
	 , J.JOB_TITLE
	 , E.SALARY
	 , E.COMMISSION_PCT
	 , E.MANAGER_ID
	 , D.DEPARTMENT_NAME
  FROM EMPLOYEES E
  JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 ORDER BY 1;
   
SELECT E.EMPLOYEE_ID
	 , E.FIRST_NAME
	 , E.LAST_NAME
	 , E.EMAIL
	 , E.PHONE_NUMBER
	 , E.HIRE_DATE
	 , (SELECT JOB_TITLE FROM JOBS J WHERE E.JOB_ID = J.JOB_ID) AS JOB_TITLE	 
	 , E.SALARY
	 , E.COMMISSION_PCT
	 , E.MANAGER_ID
	 , (SELECT DEPARTMENT_NAME FROM DEPARTMENTS D WHERE E.EMPLOYEE_ID = D.DEPARTMENT_ID) AS DEPARTMENT_NAME
  FROM EMPLOYEES E;

/*
 * 2. DEPARTMENTS 테이블과 LOCATIONS 테이블을 사용히여 각 부서가 어느 지역에
 *    위치하는지 JOIN 활용하여 조회한다.
 *    (서브쿼리도 사용 가능하기 때문에 서브쿼리로도 만들어 본다.)
 */

SELECT D.DEPARTMENT_ID
	 , D.DEPARTMENT_NAME
	 , D.MANAGER_ID
	 , L.LOCATION_ID
	 , L.STREET_ADDRESS
	 , L.POSTAL_CODE
	 , L.CITY
	 , L.STATE_PROVINCE
	 , L.COUNTRY_ID
  FROM DEPARTMENTS D
  JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
 ORDER BY 1;
   
SELECT D.DEPARTMENT_ID
	 , D.DEPARTMENT_NAME
	 , D.MANAGER_ID
	 , D.LOCATION_ID 
	 , (SELECT STREET_ADDRESS FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS STREET_ADDRESS 
	 , (SELECT POSTAL_CODE FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS POSTAL_CODE
	 , (SELECT CITY FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS CITY 
	 , (SELECT STATE_PROVINCE FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS STATE_PROVINCE 
	 , (SELECT COUNTRY_ID FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS COUNTRY_ID
  FROM DEPARTMENTS D;

/*
 * 3. 1번, 2번 문제를 활용하여 지역별 사원 수를 구하시오.
 */

-- DECODE : 주소를 다 결합시키기 위해 사용
SELECT COUNT(*) AS EMP_COUNT
	 , DECODE(L.STATE_PROVINCE, NULL, '', CONCAT(L.STATE_PROVINCE, ' ')) || ' ' || L.CITY || ' ' || L.STREET_ADDRESS AS ADDRESS
	 , L.POSTAL_CODE
  FROM EMPLOYEES E
  JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID 
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
 GROUP BY DECODE(L.STATE_PROVINCE, NULL, '', CONCAT(L.STATE_PROVINCE, ' ')) || ' ' || L.CITY || ' ' || L.STREET_ADDRESS
	 , L.POSTAL_CODE;
	
SELECT EMP_COUNT
	 , (SELECT DECODE(STATE_PROVINCE, NULL, '', CONCAT(STATE_PROVINCE, ' ')) || ' ' || L.CITY || ' ' || STREET_ADDRESS
	 	  FROM LOCATIONS L WHERE L.LOCATION_ID = T.LOCATION_ID) AS ADDRESS
  FROM(SELECT COUNT(*) AS EMP_COUNT
  			, L.LOCATION_ID
	     FROM EMPLOYEES E
  		 JOIN JOBS J
    	   ON E.JOB_ID = J.JOB_ID 
  		 JOIN DEPARTMENTS D
    	   ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  		 JOIN LOCATIONS L
    	   ON D.LOCATION_ID = L.LOCATION_ID
 		GROUP BY ROLLUP(L.LOCATION_ID)) T
 ORDER BY 1 DESC;

SELECT * FROM LOCATIONS;

/*
 * 4. COUNTRIES 테이블과 REGIONS 테이블 까지 추가로 사용하여 국가별, 대륙별 사원 수를
 * 구하시오.
 */
-- 1 : 집계에 사용이 안됨, 그룹으로 안묶임 (1 이면 반환값 반환)
-- 0 : 그룹으로 묶임 (0 이면 기본값 반환) -> 0이면 R.REGION_NAME, C.COUNTRY_NAME
SELECT DECODE(GROUPING(R.REGION_NAME), 1, '총계', R.REGION_NAME) AS 대륙부분
	 , DECODE(GROUPING(C.COUNTRY_NAME), 1, DECODE(GROUPING(R.REGION_NAME), 1, ' ', '소계'), C.COUNTRY_NAME) AS 나라구분
	-- DECODE(컬럼                     ,값1, 반환값1 -> DECODE(컬럼          ,값1 , 반환값, 기본값),         기본값)
	 , COUNT(*) AS 직원수 
  FROM EMPLOYEES E
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
  JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
  JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
  JOIN REGIONS R
    ON C.REGION_ID = R.REGION_ID
 GROUP BY ROLLUP(R.REGION_NAME, C.COUNTRY_NAME);
--                    0                0
--                    0                1         : 소계
--                    1                1         : 총계
