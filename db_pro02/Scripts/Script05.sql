SELECT *
  FROM EMPLOYEES, DEPARTMENTS;
-- WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;
 
SELECT *
  FROM DEPARTMENTS, EMPLOYEES;
  
-- 컬럼명이 두개가 동일할 때
-- USING : 결합조건이 해당하는 것이 맨 앞으로 출력됨
-- DEPARTMENT_ID가 하나 더 안나옴 
SELECT *
  FROM  EMPLOYEES
  JOIN DEPARTMENTS
 USING(DEPARTMENT_ID);

-- ON : 결합조건
SELECT *
  FROM  EMPLOYEES
  JOIN DEPARTMENTS
	ON (EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID);

-- OUTER JOIN : 일치하지 않은 값도 포함
-- LEFT JOIN : 왼쪽(EMPLOYEES)에 테이블을 기준으로 왼쪽에 없는 값도 조인을 시킴 
SELECT *
  FROM  EMPLOYEES
  LEFT JOIN DEPARTMENTS
 USING(DEPARTMENT_ID)
 WHERE EMPLOYEE_ID = 178;

-- RIGHT JOIN : 오른쪽(DEPARTMENTS)에 테이블을 기준으로 오른쪽에 없는 값도 조인을 시킴 
SELECT *
  FROM  EMPLOYEES
 RIGHT JOIN DEPARTMENTS
 USING(DEPARTMENT_ID);
 
SELECT *
  FROM  EMPLOYEES
 FULL JOIN DEPARTMENTS
 USING(DEPARTMENT_ID);
 











-- 별칠 : JOIN으로 여러테이블을 조회할 때 필요
-- 3개의 테이블 결함(원하는 만큼 결합 가능)
-- 워에서 아래로 순서대로 출력
SELECT *
  FROM EMPLOYEES E
  JOIN DEPARTMENTS D 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  JOIN JOBS J
 	ON E.JOB_ID = J.JOB_ID
 WHERE E.COMMISSION_PCT IS NOT NULL
   AND D.DEPARTMENT_ID = 80;

-- CROSS JOIN : 두행의 곱
-- EMPLOYEES 의 각각 한행씩 DEPARTMENTS 의 행 모두를 조인
SELECT COUNT(*) 
  FROM EMPLOYEES E
 CROSS JOIN DEPARTMENTS D;

SELECT X, Y
	 , (X * Y)
  FROM (SELECT (SELECT COUNT(*) FROM EMPLOYEES) AS X
			 , (SELECT COUNT(*) FROM DEPARTMENTS) AS Y
  FROM DUAL);

-- NON_EQU JOIN
-- ON과 AND로 계속 결합가능
SELECT E.EMPLOYEE_ID
	 , E.FIRST_NAME || ' ' || E.LAST_NAME
	 , E.JOB_ID
	 , J.JOB_ID
	 , J.JOB_TITLE
	 , E.SALARY
	 , J.MIN_SALARY
	 , J.MAX_SALARY
  FROM EMPLOYEES E
  JOIN JOBS J
    ON E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY -- 값에 대한 범위
   AND E.JOB_ID = J.JOB_ID
 ORDER BY 1;

SELECT EMPLOYEE_ID
	 , FIRST_NAME || ' ' || LAST_NAME "EMPLOYEE_NAME"
	 , DEPARTMENT_ID
	 , DEPARTMENT_NAME
  FROM EMPLOYEES
  JOIN DEPARTMENTS USING(DEPARTMENT_ID);

-- SELF JOIN
-- MANAGER_ID :상급 관리자를 의미
-- 오른쪽이 일반사원
SELECT E1.EMPLOYEE_ID
	 , E1.FIRST_NAME || ' ' || E1.LAST_NAME
	 , E2.EMPLOYEE_ID
	 , E2.FIRST_NAME || ' ' || E2.LAST_NAME
	 , E2.MANAGER_ID
  FROM EMPLOYEES E1
  JOIN EMPLOYEES E2
    ON E1.EMPLOYEE_ID = E2.MANAGER_ID;