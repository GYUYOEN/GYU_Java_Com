<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="testMapper"> <!-- namespace.id 로 DBConn에 맵핑됨(하나의 namespace에는 id 여러개) -> namespace는 외부에서 접근할 수 있는 이름으로 사용 -->
	<!-- resultMap : 별칭 부여 -->
	<resultMap type="empVo" id="empVoMap"> <!-- type : resultMap으로 사용할 Vo 객체, id : mapper 파일 내부에서 사용할 resultMap 식별자(임의 지정) -->
		<result column="employee_id" property="empId"/> <!-- column : DB 컬럼명(대문자/소문자 상관x), property : EmpVO의 변수 작성-->
		<result column="first_name" property="fName"/>
		<result column="last_name" property="lName"/>
	</resultMap>
	
	<resultMap type="empComplexVo" id="empComplexVoMap">
		<result column="EMPLOYEE_ID"    property="empId"     javaType="_int" /> <!-- javaType 구지 사용하지 않아도 되지만 vo객체 타입 때문에 사용(DeptVO dept, JobVO job) -->
		<result column="EMPLOYEE_NAME"  property="empName"   javaType="string" />
		<result column="PHONE_NUMBER"   property="empPhone"  javaType="string" />
		<result column="COMMISSION_PCT" property="empComPct" javaType="_double" />
		<result column="SALARY"         property="empSalary" javaType="_int" />
		<association property="dept" javaType="deptVo"> <!-- 객체타입, association : empComplexVo에 어떠한 객체와 관계가 있는지 -->
			<result column="DEPARTMENT_ID"   property="deptId"   javaType="_int" />
			<result column="DEPARTMENT_NAME" property="deptName" javaType="string" />
		</association>
		<association property="job" javaType="jobVo">
			<result column="JOB_ID"     property="jobCode"      javaType="string" />
			<result column="JOB_TITLE"  property="jobTitle"     javaType="string" />
			<result column="MIN_SALARY" property="jobMinSalary" javaType="_int" />
			<result column="MAX_SALARY" property="jobMaxSalary" javaType="_int" />
		</association>
	</resultMap>
	
	<!-- sql문 대문자 소문자 상관 x -->
	<!--
 	<select id="test" resultType="map">  // resultType : 반환타입 지정
   		select 1 as n1, 2 as n2, 3 as n3, 4 as n4 from dual
   		union all
   		select 5 as n1, 6 as n2, 7 as n3, 8 as n4 from dual
 	</select>
 	-->
 	
 	<!--
 	<select id="employee" parameterType="_int" resultType="empVo"> // empVo : 별칭 Row Data(record) 를 어떠한 자바타입으로 저장할 건지
 		SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID = #{id} // select 조회결과 -> ResultSet
 	</select>
 	-->
 	
 	<!--
 	<select id="employee" parameterType="map" resultType="empVO">
 		SELECT EMPLOYEE_ID, 
 			   FIRST_NAME, 
 			   LAST_NAME 
 	      FROM EMPLOYEES WHERE EMPLOYEE_ID BETWEEN #{id1} AND #{id2}  // #{id1}, #{id2} : 키 값
 	</select>
 	-->
	
	<select id="test1" resultType="_int">
		<!-- 이곳에 쿼리문 작성 -->
		SELECT 1234 FROM DUAL
	</select>
	
	<select id="test2" resultType="string">
		SELECT 'Mybatis Connect' FROM DUAL
	</select>
	
	<select id="test3" resultType="map">
		SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME FROM EMPLOYEES
	</select>
	
	<!-- mybatis-config.xml 파일에 TypeAliases 를 설정하여 com.data.vo.EmpVO 대신 empVo 로 사용 -->
	<!-- <select id="test4" resultType="com.data.vo.EmpVO"> -->
	<select id="test4" resultType="empVo">
		SELECT EMPLOYEE_ID AS empid
		     , FIRST_NAME AS fname
		     , LAST_NAME AS lname
		  FROM EMPLOYEES
	</select>
	
	<!-- reultType 과 resultMap 하나만 사용 가능 -->
	<select id="test5" resultMap="empVoMap"> <!-- resultMap : resultMap의 id 가 들어감-->
		SELECT EMPLOYEE_ID
		     , FIRST_NAME
		     , LAST_NAME
		  FROM EMPLOYEES
	</select>
	
	<!-- 
	마이바티스를 통해 조회한 결과를 자바의 데이터 전용 클래스에 자동 맵핑하기 위한 방법
	
	1. 클래스의 멤버변수와 테이블의 컬럼면을 동일하게 사용 -> 협업할 때 사용 불가능
	   (자바 개발자와 데이터 베이스 관리자 간의 단어 만드는 규칙이 다름
	   자바: camelCase(소문자 단어, 2번째 단어는 대문자), 데이터베이스 : _사용
	2. 조회 쿼리 구문에 AS 키워드를 사용하여 별칭을 클래스 멤버 변수명과 동일하게 부여 -> 협업할 때 사용
	3. resultMap 태그를 사용하여 테이블의 컬럼명과 클래스의 멤버 변수명의 랩핑 정보를 작성
	   -> 복잡한 멥핑할 때 사용
	 -->
 	
 	<!-- parameterType="_int" 는 기본전달타입이므로 생략 가능 -->
 	<select id="test6" resultMap="empVoMap">
		SELECT EMPLOYEE_ID
		     , FIRST_NAME
		     , LAST_NAME
		  FROM EMPLOYEES
		 WHERE EMPLOYEE_ID = #{id}
	</select>
	
	<select id="test7" parameterType="string" resultMap="empVoMap">
		SELECT EMPLOYEE_ID
		     , FIRST_NAME
		     , LAST_NAME
		  FROM EMPLOYEES
		 WHERE FIRST_NAME = #{id}
	</select>
	
	<select id="test8" parameterType="string" resultMap="empVoMap">
		SELECT EMPLOYEE_ID
		     , FIRST_NAME
		     , LAST_NAME
		  FROM EMPLOYEES
		 WHERE FIRST_NAME LIKE '%' || #{id} || '%'
		 <!-- '%' || #{id} || '%' :  %on% -->
	</select>
	
	<select id="test9" parameterType="map" resultMap="empVoMap">
		SELECT EMPLOYEE_ID
		     , FIRST_NAME
		     , LAST_NAME
		  FROM EMPLOYEES
		 WHERE EMPLOYEE_ID BETWEEN #{start} AND #{end}
		 <!-- #{start},  #{end} -> 키 : map으로 전달된 parameterType (id사용x)-->
	</select>
	
	<select id="test10" parameterType="empVo" resultMap="empVoMap">
		SELECT EMPLOYEE_ID
		     , FIRST_NAME
		     , LAST_NAME
		  FROM EMPLOYEES
		 WHERE EMPLOYEE_ID = #{empId}
		 <!-- empData.getEmpId(); -> #{empId} -->
	</select>
 	
 	<insert id="test11" parameterType="testVo">
 		<!-- INSERT INTO T_MYBATIS VALUES(#{id}, #{name}, #{today}) -->
 		INSERT INTO T_MYBATIS VALUES(SEQ_MYBATIS.NEXTVAL, #{name}, #{today})
 	</insert>
 	
 	<update id="test12" parameterType="map">
 		UPDATE T_MYBATIS
 		   SET NAME = #{name}
 		 WHERE ID = #{id}
 	</update>
 	
 	<!-- parameterType 이 map 인 것 보다 testVo 인 것이 더 낫다 -->
 	<update id="test13" parameterType="testVo">
 		UPDATE T_MYBATIS
 		   SET NAME = #{name}
 		 WHERE ID = #{id}
 	</update>
 	
 	<delete id="test14" parameterType="_int">
 		DELETE FROM T_MYBATIS
 		 WHERE ID = #{id}
 	</delete>
 	
 	<select id="test15" resultType="testVo">
 		SELECT ID
 			 , NAME
 			 , TODAY
 		  FROM T_MYBATIS
 		 WHERE ID = #{id}
 	</select>
 	
 	<!-- 
 	 <select id="test16" parameterType="empSelectVo" resultType="empVo">
	 	SELECT EMPLOYEE_ID
		 , FIRST_NAME
		 , LAST_NAME 
		 , HIRE_DATE 
		 , SALARY
	     FROM EMPLOYEES
	    WHERE SALARY >= %{salary}
	      AND HIRE_DATE BETWEEN #{startDate} AND #{endDate}
	   // AND HIRE_DATE BETWEEN #{strStartDate} AND #{strEndDate}
	   // AND HIRE_DATE BETWEEN TO_DATE(#{strStartDate}) AND TO_DATE(#{strEndDate}) 문자열 -> 날짜
	 	  AND DEPARTMENT_ID = #{deptId}
	 </select>
 	-->
 	
 	<select id="test16" parameterType="empSelectVo" resultType="empVo">
	 	SELECT EMPLOYEE_ID
		 , FIRST_NAME
		 , LAST_NAME 
		 , HIRE_DATE 
		 , SALARY
	     FROM EMPLOYEES
	    <!-- 첫번째 방법
	    WHERE 1 = 1 
	    <if test="salary != 0">
			AND SALARY >= #{salary}
		</if>
		<if test="deptId != 0">
			AND DEPARTMENT_ID = #{deptId}
		</if>
		<if test="startDate != null and endDate != null">  객체타입은 null / and, or 
			AND HIRE_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
	    -->
	    <!-- <where></where> 추가되는 구문이 있으면 앞에 단순히 WHERE만 추가해줌 -> AND 를 안없애줌 
	    <where>
	    	<choose>
	    		<when test="">
	    		 	SALARY >= #{salary}
	    		</when>
	    		<otherwise>
	    			SALARY >= 0
	    		</otherwise>
	    	</choose>
	    </where>
	    -->
	    <!-- suffixOverrides : 접미사, 뒤쪽확인 -->
	    <trim prefix="WHERE" prefixOverrides="AND"> <!-- AND라는 접두사가 앞에 있으면 최초로 AND가 쓰인 곳에 WHERE로 덮어씌어줌(AND와 OR 모두 확인하고 싶을 때 : AND|OR) -->
			<if test="salary != 0"> <!-- 조건이 있으면 추가 없으면 빠지는 구문 -->
				AND SALARY >= #{salary}
			</if>
			<choose>
				<when test="deptId != 0">
					AND DEPARTMENT_ID = #{deptId}
				</when>
				<!-- 
				<when test="deptIdList != null">
					ADD DEPARTMENT_ID IN (
					<foreach collection="deptIdList" item="" index="" open="" close="" separator="">
						80, 90, 100 // list 안에 있는 거 반복
					</foreach>
					)
				</when>
				-->
				<when test="deptIdList != null">
					<!-- 맵에 대한 키가 필요할 때 index -->
					<foreach collection="deptIdList" item="value" index="index" open="AND DEPARTMENT_ID IN (" close=")" separator=", ">
						#{value} <!-- index = 번호, item = 값 (map(값, 키) -> list(값, 번호)) -->
					</foreach>
				</when>
			</choose>
			<choose>
				<when test="startDate != null and endDate != null">
					AND HIRE_DATE BETWEEN #{startDate} AND #{endDate}
				</when> <!-- else if -->
				<when test="startDate == null and endDate != null">
					AND HIRE_DATE &lt;= #{endDate}
				</when>
				<when test="startDate != null and endDate == null">
					AND HIRE_DATE >= #{startDate}
				</when>
			</choose>
			<!-- 
			<choose>
				<when test=""></when> // else if
				<otherwise test=""></otherwise> // else
			</choose>
			-->
		</trim>
 	</select>
 	
 	<select id="trimTest" parameterType="map" resultType="_int">
		SELECT COUNT(*) FROM EMPLOYEES
		<trim prefix="WHERE" prefixOverrides="AND">
		    <if test="empId != 0">
		        AND EMPLOYEE_ID = #{empId}
		    </if>
		</trim>
		AND 1 = 1
	</select>
 	
 	<!-- 시퀀스 테이블을 사용할 때 현재 시퀀스 번호를 알기 위한 로직 -->
 	<!-- parameterType은 반드시 객체 형태 -->
 	<!-- keyColumn : 시퀀스가 사용이 되는 데이터베이스 컬럼 -->
 	<!-- keyProperty : 시퀀스를 저장할 vo 객체의 멤버변수명 -->
  	<insert id="seqGetInsert" parameterType="testVo" useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
 		INSERT INTO T_MYBATIS VALUES(SEQ_MYBATIS.NEXTVAL, #{name}, #{today})
 	</insert>
 	
 	<select id="empComplexSelect" resultMap="empComplexVoMap"> <!-- int형 기본값이라 별도 parameter 지정x -->
	 	SELECT E.EMPLOYEE_ID
		     , E.FIRST_NAME || ' ' || E.LAST_NAME AS EMPLOYEE_NAME
		     , E.PHONE_NUMBER
		     , E.COMMISSION_PCT 
		     , E.SALARY
		     , D.DEPARTMENT_ID
		     , D.DEPARTMENT_NAME
		     , J.JOB_ID
		     , J.JOB_TITLE
		     , J.MIN_SALARY
		     , J.MAX_SALARY
		  FROM EMPLOYEES E
		  JOIN DEPARTMENTS D
		    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
		  JOIN JOBS J
		    ON E.JOB_ID = J.JOB_ID
		 WHERE E.EMPLOYEE_ID = #{empId} <!-- 값이 하나라 #{empId}를 아무렇게 명시해도 상관 없음 -->
 	</select>
</mapper>