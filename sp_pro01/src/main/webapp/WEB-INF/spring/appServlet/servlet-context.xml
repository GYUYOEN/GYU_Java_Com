<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 
		@Transactional을 사용하기 위해 xmlns:tx="http://www.springframework.org/schema/tx 추가
		맨밑에 http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd 추가
	-->
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/static/**" location="/resources/" /> <!-- mapping에 있는 url 주소로 요청하면 location 에 저장 -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" /> <!-- 이곳에서 경로를 미리 지정해줌 -->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- WEB-INF/views : prefix, .jsp: suffix -> return에는 그 사이값만 써주면 됨 /WEB-INF/views/board/add.jsp = return "board/add" -->
	
	<context:component-scan base-package="com.myhome.web" />
	
	<!-- 데이터베이스 설정 -->
	<!-- 
		beans:bean : 객체 생성
		id : 디른 것과 연결시켜주기 위한 객체 고유 식별자 -> ref
		beans:property : 속성
	-->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"></beans:property>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521/XEPDB1"></beans:property>
		<beans:property name="username" value="puser2"></beans:property>
		<beans:property name="password" value="puser2"></beans:property>
	</beans:bean>
	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean> 
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> <!-- 	// @Transactional 을 사용하기 위해 추가 -->
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></beans:property>
		<beans:property name="mapperLocations" value="classpath:/mybatis/mapper/*.xml"></beans:property> <!-- 여기에 mapper 등록해야하 함 -->
	</beans:bean>
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory"></beans:constructor-arg>
	</beans:bean>
	
	<!-- @Transactional 어노테이션 을 찾는 역할, 이 어노테이션이 적용되어있으면 transactionManager를 적용 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</beans:bean>
</beans:beans>
