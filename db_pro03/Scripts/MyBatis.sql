CREATE TABLE T_MYBATIS (
	   id NUMBER
	 , name VARCHAR2(100)
	 , today DATE
);

ALTER TABLE T_MYBATIS ADD CONSTRAINT T_MYBATIS_ID_P PRIMARY KEY(id);

CREATE SEQUENCE SEQ_MYBATIS;

INSERT INTO T_MYBATIS VALUES (SEQ_MYBATIS.NEXTVAL, 'test', SYSDATE);

SELECT * FROM T_MYBATIS;
DELETE FROM T_MYBATIS;

SELECT EMPLOYEE_ID
	 , FIRST_NAME
	 , LAST_NAME 
	 , HIRE_DATE 
	 , SALARY
  FROM EMPLOYEES
 WHERE SALARY >= 10000
   AND HIRE_DATE BETWEEN TO_DATE('1995/01/01') AND TO_DATE('2000/12/31')
   AND DEPARTMENT_ID = 80;

SELECT * FROM EMPLOYEES;
SELECT * FROM JOBS;
SELECT * FROM DEPARTMENTS;

  
SELECT COUNT(*) AS TOTAL 
	 , D.DEPARTMENT_NAME AS DEPT_NAME
	 , E.DEPARTMENT_ID AS DEPT_CODE
  FROM EMPLOYEES E
  JOIN DEPARTMENTS D
	ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 WHERE E.DEPARTMENT_ID = 80
-- WHERE E.DEAARTMENT_ID IN (80, 90, 100)
-- WHERE E.DEPARTMENT_ID BEWEEN 80 AND 100
 GROUP BY D.DEPARTMENT_NAME, E.DEPARTMENT_ID;
 
SELECT E.EMPLOYEE_ID
	 , E.FIRST_NAME || ' ' || E.LAST_NAME  AS EMPLOYEE_NAME
	 , E.PHONE_NUMBER
	 , E.COMMISSION_PCT
	 , E.SALARY
	 , D.DEPARTMENT_ID
	 , D.DEPARTMENT_NAME
	 , J.JOB_ID
	 , J.JOB_TITLE
	 , J.MIN_SALARY
	 , J.MAX_SALARY
  FROM EMPLOYEES E
  JOIN DEPARTMENTS D
  	ON E.DEPARTMENT_ID  = D.DEPARTMENT_ID
  JOIN JOBS J
  	ON E.JOB_ID = J.JOB_ID
 WHERE E.EMPLOYEE_ID = 100;

SELECT * FROM LOCATIONS;
SELECT * FROM JOBS;

SELECT COUNT(*) FROM EMPLOYEES WHERE EMPLOYEE_ID = 100;
 

SELECT * 
  FROM (SELECT ROWNUM AS NUM
	 		 , DEPARTMENT_ID
			 , DEPARTMENT_NAME
			 , MANAGER_ID
			 , LOCATION_ID
 		  FROM DEPARTMENTS)
WHERE NUM BETWEEN 11 AND 20;




DROP TABLE BOARD;

CREATE SEQUENCE SEQ_BOARD;

CREATE TABLE board(
    boardnum NUMBER,
    boardwriter VARCHAR2(20) NOT NULL,
    boardtitle VARCHAR2(50) NOT NULL,
    boardcontent VARCHAR2(2000) NOT NULL,
    boarddate DATE DEFAULT SYSDATE,
    CONSTRAINT board_pk PRIMARY KEY(boardnum)
);

comment on TABLE  board is '게시판';
COMMENT ON COLUMN board.boardnum IS '게시판 번호';
COMMENT ON COLUMN board.boardwriter IS '게시판 작성자';
COMMENT ON COLUMN board.boardtitle IS '게시판 제목';
COMMENT ON COLUMN board.boardcontent IS '게시판 내용';
COMMENT ON COLUMN board.boarddate IS '게시판 작성일';​

SELECT * FROM BOARD;





SELECT EMPLOYEE_ID 
	 , CONCAT(FIRST_NAME, ' ' || LAST_NAME) AS EMPLOYEE_NAME
	 , CONCAT(EMAIL, '@emp.com') AS EMAIL
	 , J.JOB_TITLE AS JOB_NAME
	 , E.JOB_ID
	 , D.DEPARTMENT_NAME
	 , E.DEPARTMENT_ID
  FROM EMPLOYEES E
  JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
    
   
SELECT COUNT(*)
		  FROM EMPLOYEES E
		  JOIN JOBS J
		    ON E.JOB_ID = J.JOB_ID
 		  JOIN DEPARTMENTS D
   		    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
   		    
CREATE TABLE PERMISSIONS (
	   empId 	 NUMBER
	 , tablename VARCHAR2(100)
	 , pread 	 VARCHAR2(1) DEFAULT('Y') CHECK (pread IN ('Y', 'N'))
	 , padd 	 VARCHAR2(1) DEFAULT('N') CHECK (padd IN ('Y', 'N'))
	 , pupdate 	 VARCHAR2(1) DEFAULT('N') CHECK (pupdate IN ('Y', 'N'))
	 , pdelete   VARCHAR2(1) DEFAULT('N') CHECK (pdelete IN ('Y', 'N'))
	 , CONSTRAINT PERMISSIONS_EMPID_TABLENAME_PK PRIMARY KEY(empid, tablename)
);

DROP TABLE PERMISSIONS;

INSERT INTO PERMISSIONS(empid, tablename)
SELECT EMPLOYEE_ID AS empid
	 , 'employees'
  FROM EMPLOYEES;

INSERT INTO PERMISSIONS(empid, tablename)
SELECT EMPLOYEE_ID AS empid
	 , 'departments'
  FROM EMPLOYEES;
  
INSERT INTO PERMISSIONS(empid, tablename)
SELECT EMPLOYEE_ID AS empid
	 , 'jobs'
  FROM EMPLOYEES;
  
INSERT INTO PERMISSIONS(empid, tablename)
SELECT EMPLOYEE_ID AS empid
	 , 'permissions'
  FROM EMPLOYEES;
 
SELECT * FROM PERMISSIONS WHERE empId = 100;
UPDATE PERMISSIONS SET PREAD ='Y' WHERE EMPID = 100 AND TABLENAME = 'departments';
UPDATE PERMISSIONS SET PREAD ='N' WHERE TABLENAME != 'employees';

SELECT * FROM PERMISSIONS;

UPDATE PERMISSIONS 
   SET PREAD = 'Y'
     , PADD = 'Y'
     , PUPDATE = 'Y'
     , PDELETE = 'Y'
 WHERE EMPID = 200;

INSERT INTO PERMISSIONS(empId, tablename, pread)
SELECT EMPLOYEE_ID AS empId
	 , 'board'
	 ,	'Y'
  FROM EMPLOYEES;
 
UPDATE PERMISSIONS
   SET PREAD = 'Y'
 WHERE EMPID = 100;

DROP TABLE EMP_BOARDS CASCADE CONSTRAINTS;
DROP SEQUENCE EMP_BOARDS_SEQ;

CREATE TABLE EMP_BOARDS (
	   ID NUMBER NOT NULL
	 , TITLE VARCHAR2(100) NOT NULL
	 , CONTENT VARCHAR2(2000)
	 , EMPID NUMBER NOT NULL
	 , CREATEDATE DATE DEFAULT(SYSDATE)
	 , VIEW_CNT NUMBER DEFAULT(0)
	 , "LIKE" NUMBER DEFAULT(0)
	 , CONSTRAINT EMP_BOARDS_ID_PK PRIMARY KEY (ID)
	 , CONSTRAINT EMP_BOARDS_EMP_ID_FK FOREIGN KEY(EMPID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

/* 기존 테이블의 데이터를 유지하고 싶으면 이 구문을 실행해서 수정하세요.
ALTER TABLE EMP_BOARDS ADD VIEW_CNT NUMBER DEFAULT(0);
ALTER TABLE EMP_BOARDS ADD "LIKE" NUMBER DEFAULT(0);
*/

CREATE SEQUENCE EMP_BOARDS_SEQ NOCACHE;

INSERT INTO EMP_BOARDS VALUES(EMP_BARDOS_SEQ.NEXTVAL, '테스트 제목', '테스트 내용', 100, SYSDATE);

SELECT * FROM EMP_BOARDS;





CREATE TABLE EMP_BOARDS_STATISTICS (
	   ID NUMBER PRIMARY KEY
	 , EMPID NUMBER
	 , BID NUMBER
	 , ISVIEW VARCHAR2(1) CHECK(ISVIEW IN('Y', 'N'))
	 , LATEST_DATE1 DATE -- 언제 조회 했는지
	 , ISLIKE VARCHAR2(1) CHECK(ISLIKE IN('Y', 'N'))
	 , LATEST_DATE2 DATE -- 언제 좋아요를 눌렀는지
	 , CONSTRAINT EMP_BOARDS_STATISTICS_EMPID_FK FOREIGN KEY(EMPID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
	 , CONSTRAINT EMP_BOARDS_STATISTICS_BID_FK FOREIGN KEY(BID) REFERENCES EMP_BOARDS(ID)
);

SELECT * FROM EMP_BOARDS_STATISTICS;

CREATE SEQUENCE EMP_BOARDS_STATISTICS_SEQ NOCACHE;

DROP TABLE COMMENTS;

CREATE TABLE COMMENTS(
	   ID 			NUMBER			PRIMARY KEY
	 , BID 			NUMBER
	 , CONTENT 		VARCHAR2(1000)  NOT NULL
	 , EMPID 		NUMBER
	 , CREATEDATE 	DATE			DEFAULT(SYSDATE)
	 , DELETED 		VARCHAR2(1)		CHECK(DELETED IN ('Y', 'N'))
	 , CONSTRAINT COMMENTS_BID_FK FOREIGN KEY(BID) REFERENCES EMP_BOARDS(ID)
	 , CONSTRAINT COMMENTS_EMPID_FK FOREIGN KEY(EMPID) REFERENCES EMPLOYEES(EMPLOYEE_ID)	   
);

SELECT * FROM COMMENTS;

DROP SEQUENCE COMMENT_SEQ;

CREATE SEQUENCE COMMENTS_SEQ NOCACHE;

UPDATE COMMENTS
   SET DELETED = 'N';
   
DROP TABLE UPLOADFILES;

CREATE TABLE UPLOADFILES (
	   ID NUMBER							-- 자동 증가 시퀀스
	 , BID NUMBER							-- 게시판 ID
	 , FILENAME VARCHAR2(200) NOT NULL		-- 오리지널 파일명
	 , UUIDNAME VARCHAR2(36) NOT NULL		-- 변경된 파일명(UUID : 범용 고유 식별자 -> 16 진수 값(0~9/A~Z), 32 자)
	 , LOCATION VARCHAR2(500) NOT NULL		-- 실제 파일 위치
	 , URL VARCHAR2(500) NOT NULL			-- 요청 URL 주소
	 , FILESIZE NUMBER DEFAULT(0)			-- 파일크기(바이트)
	 , CONSTRAINT UPLOADFILES_ID_PK PRIMARY KEY(ID)
	 , CONSTRAINT UPLOADFILES_BID_FK FOREIGN KEY(BID) REFERENCES EMP_BOARDS(ID)
);

CREATE SEQUENCE UPLOADFILES_SEQ NOCACHE;


